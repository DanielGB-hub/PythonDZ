# 6) Необходимо создать (не программно) текстовый файл, где каждая строка описывает учебный предмет
# и наличие лекционных, практических и лабораторных занятий по этому предмету и их количество.
# Важно, чтобы для каждого предмета не обязательно были все типы занятий.
# Сформировать словарь, содержащий название предмета и общее количество занятий по нему. Вывести словарь на экран.
# Примеры строк файла: Информатика:   100(л)   50(пр)   20(лаб).
#                                         Физика:   30(л)   —   10(лаб)
#                                         Физкультура:   —   30(пр)   —
# Пример словаря: {“Информатика”: 170, “Физика”: 40, “Физкультура”: 30}

"""
В данной программе использованы 3 функции:
1. f_info - возвращает информацию о кодировке исходного файла
2. dir_l - покажет содержимое директории, из которой вы откроете данную программу
3. in_f - считает содержимое файла, выведет это содержимое построчно на экран, вернет содержимое файла в виде списка,
элементами которого будут строки и закроет файл.
"""
import re
import os
from chardet.universaldetector import UniversalDetector


def f_info(f_name):  # функция чтения информации о кодировке
    detector = UniversalDetector()
    with open(f_name, 'rb') as fb:
        for line in fb:
            detector.feed(line)
            if detector.done:
                break
        detector.close()
    #print(detector.result)  # раскомментировать, чтобы посмотреть информацию о файле
    return detector.result.get('encoding')


def dir_l():  # функция чтения списка файлов в локальной директории
    print("Список файлов в локальной директории: ")
    dir_list = os.listdir(path=".")  # показываем содержимое директории, в которой лежит файл задания
    print(dir_list)


def in_f(f_name):  # функция чтения файла с разной кодировкой и вывода его содержимого
    if f_info(f_name) == "utf-8" or f_info(f_name) == "UTF-8-SIG":
        print(f"Кодировка: {f_info(f_name)}")
        f_obj = open(f_name, "r", encoding="utf-8-sig")
    elif f_info(f_name) == "windows-1251":
        print(f"Кодировка: {f_info(f_name)}")
        f_obj = open(f_name, "r", encoding="windows-1251")
    elif f_info(f_name) == "ascii":
        print(f"Кодировка: {f_info(f_name)}")
        f_obj = open(f_name, "r", encoding="ascii")
    print()
    content_list_def = []
    print("Содержимое файла:\n ")
    content_f = f_obj.readlines()
    for el_f in content_f:  # выводим содержимое построчно
        print(el_f.replace('\n', ''))  # делаем замену, что б строки не выводились через пустые строки
        content_list_def.append(el_f.replace('\n', ''))
    f_obj.close()  # закрываем файл
    print()
    if f_obj.closed == 1:
        print("Файл закрыт")
    return content_list_def  # выводим содержимое в список для последующей обработки


print("Данная программа откроет файл со строками типа : 'Информатика:   100(л)   50(пр)   20(лаб)',\n"
      " посчитает суммарное количество часов каждой дисциплины и выведет на экран результат в виде словаря,\n"
      "например: {'Информатика': 170}")
dir_l()  # смотрим список файлов, которые можно открыть

try:  # обработка исключения "Такой файл не найден"
    try:  # обработка исключения "Кодировка не распознана"
        file_name = input("Выберете из списка имя текстового файла, который вы хотите открыть: ")  # все жрет, и .py
        content_list = in_f(file_name)  # показываем содержимое файла и возвращаем это содержимое списком
        m_list_discipline = []  # объявляем список в который пойдут названия дисциплин
        m_list_sum_h = []  # объявляем список в который пойдут суммы чисел строк
        result_dict = {}  # объявляем итоговый словарь
        sum_h = 0  # объявляем переменную суммы часов дисциплины
        try:  # обработка исключения "Содержимое файла не подходит для обратобки"
            for el in content_list:
                numbers = re.findall(r'\d+', el)  # находим все int числа
                numbers = [int(x) for x in numbers]  # приводим все числа к типу int
                discipline = el.replace(f"{el[el.index(':'):len(el)]}", "")  # отделяем дисциплины от всего остального
                m_list_discipline.append(discipline)
                sum_h = sum(numbers) # вычисляем суммы чисел строк
                m_list_sum_h.append(sum_h)  # добавляем суммы чисел строк в список
            result_dict = dict(zip(m_list_discipline, m_list_sum_h))  # делаем хитрый финт
            print(f"Итоговый словарь: {result_dict}")
        except ValueError:
            print("Содержимое файла не подходит для обработки. Пожалуйста, откройте подходящий файл.")
    except NameError:
        print("Кодировка файла не распознана, пересохраните файл в одной из кодировок utf-8, windows-1251 или ascii\n"
              "и попробуйте снова")
except FileNotFoundError:
    print("Такой файл не найден")
