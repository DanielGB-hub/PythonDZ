# 1) Создать класс TrafficLight (светофор) и определить у него один атрибут color (цвет) и метод running (запуск).
# Атрибут реализовать как приватный. В рамках метода реализовать переключение светофора в режимы:
# красный, желтый, зеленый.
# Продолжительность первого состояния (красный) составляет 7 секунд, второго (желтый) — 2 секунды,
# третьего (зеленый) — на ваше усмотрение.
# Переключение между режимами должно осуществляться только в указанном порядке (красный, желтый, зеленый).
# Проверить работу примера, создав экземпляр и вызвав описанный метод.
# Задачу можно усложнить, реализовав проверку порядка режимов, и при его нарушении выводить соответствующее
# сообщение и завершать скрипт.
"""
ВНИМАНИЕ! Возможно, логика работы светофора в рамках класса должна быть какой-то другой, но уж извините-простите.

Данный скрипт требует для работы 4 параметра: время работы (секунды) для красного, желтого, зеленого цветов и
количество циклов работы светофора.
При этом, если количество циклов поставить равным 0, то светофор переходит в режим случайного переключения
и активируется алгоритм проверки правильности работы светофора.

Соответственно, скрипт имеет две ветки: автоматическую работу заданное в параметрах количество раз
и рандомный режим переключения до 3-х ошибок. Три  - исключительно для наглядности правильной работы алгоритма
сравнения (по условию задачи после первой же ошибки нужно остановить скрипт).

В случайном режиме последовательность цветов сигналов светофора отображается в консоли.
В автоматическом режиме эта последовательность защищена от просмотра.

Алгоритм проверки на ошибки переключения реализован так:

создан зацикленный эталонный список (normal_list) - в каком порядке должны переключаться цвета:
красный - желтый - зеленый - желтый - и т.д. по кругу.
Рандом выбирает следующие друг за другом цвета из этого же списка.
Далее, каждый рандомно созданный цвет сравнивается с эталонным, который должен быть следующим,
и если они совпали - ошибок нет. Если не совпали - счетчик ошибок увеличивается на 1 и выводится предупрежедние.

Перед запуском скрипта введите параметры. Если вы пользуейтесь PyCharm, в верхнем меню Run выбирите
'Edit Configurations...'. В открывшейся форме в строке 'Parameters' введите 4 параметра через пробел.
Например: 7 2 7 3. Параметр 'script_name' вводить не нужно, он заполнится автоматически.

Если вы воспользуетесь командной строкой, то после указания пути перед именем скрипта введите python, затем имя скрипта
 и далее параметры через пробел.
Например: "С:\python DZ6_1.py 7 2 7 3"
С Вами был Даниил Гайворонский, приятного полета!
"""
import random
from sys import argv
# import module6_1  # сделал модуль сначала. Все работало. После перезагрузки чарма модуль не увидел параметры скрипта.
#  потом я их указал, они прописались, ок. Cветофор при включении первого цвета начал мигать на долю
#  секунды. Решил отказаться пока от идеи вынести класс в модуль пока не разберусь с этим вопросом.
import time
from tkinter import *

tk = Tk()
window = Canvas(tk, width=110, height=310)
window.pack()


def beauty():  # вот эти 5 строк  -  для красоты при перекючении. На 0.5 сек все цвета выключаются.
    # И так нагляднее различать два подряд включенных цвета при рандоме

    window.create_oval(10, 10, 100, 100, fill="black")
    window.create_oval(10, 110, 100, 200, fill="black")
    window.create_oval(10, 210, 100, 300, fill="black")
    tk.update()
    time.sleep(0.5)


class TrafficLight:
    color = "Цвет защищен от просмотра"  # объявил тут атрибут, что бы в выдаче последовательности цветов сигналов
    # светофора в автоматическом режиме скрипт не вываливался в ошибку, а сообщал: "Цвет защищен от просмотра"

    def running(self, color):  # вот тут я не уверен, правильно ли я сделал, что вынес всю реализацию визуального
        # модуля в метод класса.
        self.__color = color
        if color == "red":
            beauty()  # вызываем "крастоту"
            window.create_oval(10, 10, 100, 100, fill=color)
            window.create_oval(10, 110, 100, 200, fill="black")
            window.create_oval(10, 210, 100, 300, fill="black")
            tk.update()
            time.sleep(int(time_red))
        elif color == "yellow":
            beauty()
            window.create_oval(10, 10, 100, 100, fill="black")
            window.create_oval(10, 110, 100, 200, fill=color)
            window.create_oval(10, 210, 100, 300, fill="black")
            tk.update()
            time.sleep(int(time_yellow))
        elif color == "green":
            beauty()
            window.create_oval(10, 10, 100, 100, fill="black")
            window.create_oval(10, 110, 100, 200, fill="black")
            window.create_oval(10, 210, 100, 300, fill=color)
            tk.update()
            time.sleep(int(time_green))


try:
    print("Данный скрипт иммитирует работу светофора. Для его работы нужно задать 4 параметра:\n"
          "время работы каждого сигнала светофора и количество циклов в автоматическом режиме.\n\n"
          "Если количество циклов задать равным 0, светофор активируется в режиме случайного переключения.\n"
          "При работе в этом режиме осуществляется проверка очередности сигналов. \n"
          "При обнаружении 3-х ошибок очередности скрипт остановит свою работу.\n")
    script_name, time_red, time_yellow, time_green, number = argv
    print("Список последовательности цветов сигналов светофора:\n")
    if int(number) == 0:  # ветка случайной генерации цвета с проверкой последовательности
        color = TrafficLight()
        normal_list = ["red", "yellow", "green", "yellow"]  # объявляю эталонный список последовательности включения
        random_color = normal_list[0]  # в начале работы назначаю стартовый цвет
        normal_color = normal_list[0]  # стартовый цвет эталонного списка
        print(f"Сейчас должен быть: {normal_color}")
        color.running(random_color)  # светит стартовый цвет эталонного списка
        print(f"Сейчас был:      {color._TrafficLight__color}\n")
        i = 0  # задаем счетчик индекса для списка normal_list
        error = 0  # задаем счетчик ошибок.
        while error != 3:  # условие проверки на ошибки. Для наглядности - не останавливаем до 3-х ошибок
            i += 1
            if i == 4:  # условие сравнения с цветами normal_list "по кругу"
                i = 0
            normal_color = normal_list[i]  # эту строчку можно было бы убрать и использовать сразу normal_list[i],
            # но для наглядности решил оставить
            random_color = random.choice(normal_list)  # включается случайный генератор цветов из эталонного списка
            if normal_color == random_color:  # сравниваем i+1 элемент эталонного списка с рандомным элементом
                # из этого же списка
                print(f"Сейчас должен быть: {normal_color}")
                color.running(random_color)
                print(f"Сейчас был:      {color._TrafficLight__color}\n")

            else:  # если цвета не совпали - увеличиваем счетчик ошибок и сообщаем об ошибке
                print(f"Сейчас должен быть: {normal_color}")
                color.running(random_color)
                print(f"Сейчас был:      {color._TrafficLight__color}")
                error += 1
                print(f"Внимание! Неправильный порядок работы светофора! Количество ошибок: {error}\n")

        print(f"Светофор вышел из строя! Недопустимое количество ошибок!")
    else:  # ветка автоматической работы с заданным количеством циклов и защищенным выводом последовательности цветов
        i = 1  # задаем счетчик количества повторений
        while i <= int(number):  # это автоматический цикл работы светофора, тут все просто
            color = TrafficLight()
            color.running("red")
            print(color.color)  # атрибут приватно защищен, поэтому цвет не виден. Объявил атрибут color в классе,
            # чтоб на этом месте не было ошибки, а просто писалось, что "Цвет защищен от просмотра"
            color.running("yellow")
            print(color.color)
            color.running("green")
            print(color.color)
            color.running("yellow")
            print(color.color)
            i += 1
except ValueError:
    print("Задайте 4 параметра (через пробел): время работы красного, желтого, зеленого сигналов светофора\n"
          "и количество циклов")
