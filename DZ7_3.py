# 3) Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и
# целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек
# исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек
# двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение
# количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное
# деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.


class Cell:

    def __init__(self, quantity):
        self.quantity = int(quantity)

    def __add__(self, other):  # перегрузка метода сложения
        return f"{self.quantity + other.quantity} ячейкам"

    def __sub__(self, other):  # перегрузка метода вычитания
        sub = self.quantity - other.quantity
        return f"{sub} ячейкам" if sub > 0 else "меньше нуля!"

    def __truediv__(self, other):  # перегрузка метода деления
        div = self.quantity // other.quantity
        return f"{div} ячейкам" if div > 0 else "меньше единицы!"

    def __mul__(self, other):  # перегрузка метода умножения
        return f"{self.quantity * other.quantity} ячейкам"

    def make_order(self, row):
        result = ''
        for el in range(int(self.quantity / row)):  # алгоритм вывода ячеек в ряды
            result += '*' * row + '\n'  # выводим полные ряды
        result += '*' * (self.quantity % row) + '\n'  # выводим остаток
        return result


print("Данная программа посчитает сумму, разность, деление и умножение ячеек двух клеток "
      "по несколько ячеек в каждой.\n")
cell_1 = Cell(4)
print(f"Первая клетка:\n\n{cell_1.make_order(5)}\n")
cell_2 = Cell(18)
print(f"Вторая клетка:\n\n{cell_2.make_order(5)}\n")
print(f"Размер общей клетки после сложения {cell_1 + cell_2}")
print(f"Размер общей клетки после вычитания {cell_1 - cell_2}")
print(f"Размер общей клетки после деления {cell_1 / cell_2}")
print(f"Размер общей клетки после умножения {cell_1 * cell_2}")
