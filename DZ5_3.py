#  Создать текстовый файл (не программно), построчно записать фамилии сотрудников и величину их окладов
# (не менее 10 строк). Определить, кто из сотрудников имеет оклад менее 20 тыс.,
# вывести фамилии этих сотрудников. Выполнить подсчет средней величины дохода сотрудников.
# Пример файла:
# Иванов 23543.12
# Петров 13749.32

"""
В данной программе использованы 3 функции:
1. f_info - возвращает информацию о кодировке исходного файла
2. dir_l - покажет содержимое директории, из которой вы откроете данную программу
3. in_f - считает содержимое файла, выведет это содержимое построчно на экран, вернет содержимое файла в виде списка,
элементами которого будут строки и закроет файл.

Программа автоматически распознает такие кодировки: utf-8, utf-8-sig, windows-1251 и ascii.
"""

import os
from chardet.universaldetector import UniversalDetector


def f_info(f_name):  # функция чтения информации о кодировке
    detector = UniversalDetector()
    with open(f_name, 'rb') as fb:
        for line in fb:
            detector.feed(line)
            if detector.done:
                break
        detector.close()
    # print(detector.result)  # раскомментировать, чтобы посмотреть информацию о файле
    return detector.result.get('encoding')


def dir_l():  # функция чтения списка файлов в локальной директории
    print("Список файлов в локальной директории: ")
    dir_list = os.listdir(path=".")  # показываем содержимое директории, в которой лежит файл задания
    print(dir_list)


def in_f(f_name):  # функция чтения файла с разной кодировкой и вывода его содержимого
    if f_info(f_name) == "utf-8" or f_info(f_name) == "UTF-8-SIG":
        print(f"Кодировка: {f_info(f_name)}")
        f_obj = open(f_name, "r", encoding="utf-8-sig")
    elif f_info(f_name) == "windows-1251":
        print(f"Кодировка: {f_info(f_name)}")
        f_obj = open(f_name, "r", encoding="windows-1251")
    elif f_info(f_name) == "ascii":
        print(f"Кодировка: {f_info(f_name)}")
        f_obj = open(f_name, "r", encoding="ascii")
    print()
    content_list_def = []
    print("Содержимое файла:\n ")
    content_f = f_obj.readlines()
    for el_f in content_f:  # выводим содержимое построчно
        print(el_f.replace('\n', ''))  # делаем замену, что б строки не выводились через пустые строки
        content_list_def.append(el_f.replace('\n', ''))
    f_obj.close()  # закрываем файл
    print()
    if f_obj.closed == 1:
        print("Файл закрыт")
    return content_list_def  # выводим содержимое в список для последующей обработки


print("Данная программа откроет файл с данными о сотрудниках, определит, кто из них имеет оклад менее 20 тыс.\n"
      "и посчитает среднюю величину дохода сотрудников")
dir_l()  # смотрим список файлов, которые можно открыть

try:  # обработка исключения "Такой файл не найден"
    try:  # обработка исключения "Кодировка не распознана"
        file_name = input("Выберете из списка имя текстового файла, который вы хотите открыть: ")  # все жрет, и .py
        content_list = in_f(file_name)  # показываем содержимое файла и возвращаем это содержимое списком
        print(f"Список сотрудников с окладом меньше 20 тыс:\n ")
        w = 0  # объявляем переменную счетчика сотрудников
        sum_w = 0  # объявляем переменную для подсчета суммы всех окладов
        for el in content_list:  # выводим содержимое построчно
            w += 1  # считаем количество сотрудников
            for i in el.split():
                try:
                    result = float(i)  # извлекаем из строки значение оклада
                    sum_w = result + sum_w  # считаем сумму всех окладов
                    if result < 20000:
                        print(el.replace('\n', ''))  # выводим построчно на экран сотрудников с окладом < 20 тыс
                except ValueError:
                    pass
        print()
        print(f"Средняя величина доходов сотрудников: {sum_w / w}")
    except NameError:
        print(f"Кодировка файла не распознана, пересохраните файл в одной из кодировок utf-8, windows-1251 или ascii\n"
              f"и попробуйте снова")
except FileNotFoundError:
    print("Такой файл не найден")
